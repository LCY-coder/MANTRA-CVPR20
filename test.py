import argparse
import evaluate_MemNet

def parse_config():
    parser = argparse.ArgumentParser()
    parser.add_argument("--cuda", default=True)
    parser.add_argument("--batch_size", type=int, default=32)

    parser.add_argument("--past_len", type=int, default=20)
    parser.add_argument("--future_len", type=int, default=40)
    parser.add_argument("--preds", type=int, default=5)
    parser.add_argument("--dim_embedding_key", type=int, default=48)

    parser.add_argument("--model", default='pretrained_models/model_MANTRA')
    parser.add_argument("--visualize_dataset", default=False)
    parser.add_argument("--memory_saved", default=True)
    parser.add_argument("--withMRI", default=True, help='generate predictions with/without IRM')
    parser.add_argument("--saveImages", default=None,
                        help=
                        '''
                        Save in test folder examples of dataset with prediction generated by MANTRA.. 
                        If None, it doesn't save anything.
                        If 'All', it saves all examples.
                        If 'Subset', it saves examples defined in index_qualitative.py (most significant)
                        ''')

    parser.add_argument("--track_file", default="kitti_dataset.json", help="dataset file")
    parser.add_argument("--info", type=str, default='', help='Name of training. '
                                                             'It will use in tensorboard log and test folder')
    return parser.parse_args()

def main(config):
    v = evaluate_MemNet.Validator(config)
    print('start evaluation')
    v.test_model()

if __name__ == "__main__":
    config = parse_config()
    main(config)



