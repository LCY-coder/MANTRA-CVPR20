import argparse
import evaluate_MemNet

def parse_config():
    parser = argparse.ArgumentParser()
    parser.add_argument("--cuda", default=True)
    parser.add_argument("--batch_size", type=int, default=32)
    parser.add_argument("--past_len", type=int, default=20)
    parser.add_argument("--future_len", type=int, default=40)
    parser.add_argument("--preds", type=int, default=5)

    #model_ok_cvpr
    # parser.add_argument("--model", default='pretrained_models/MANTRA/model_MANTRA')

    #model_controller_last
    parser.add_argument("--model", default='pretrained_models/model_controller/model_controller')


    # parser.add_argument("--model_ae", default='pretrained_models/model_AE/model_ae_epoch_959_2020-04-26 23')
    # parser.add_argument("--model_controller", default='pretrained_models/model_controller/model2019-10-22 09:55:58')
    # parser.add_argument("--model", default='pretrained_models/model_controller/model_controller_2020-04-27 23:12:06')
    #parser.add_argument("--model", default='pretrained_models/model_epoch1492019-11-19 10:41:43')
    #parser.add_argument("--model", default='pretrained_models/model_IRM_epoch_449')

    parser.add_argument("--visualize_dataset", default=False)
    parser.add_argument("--saved_memory", default=True)
    parser.add_argument("--memories_path", default='pretrained_models/MANTRA/memories/')
    parser.add_argument("--withIRM", default=False, help='generate predictions with/without IRM')
    parser.add_argument("--saveImages", default=None,
                        help=
                        '''
                        Save in test folder examples of dataset with prediction generated by MANTRA..
                        If None, it doesn't save anything.
                        If 'All', it saves all examples.
                        If 'Subset', it saves examples defined in index_qualitative.py (most significant)
                        ''')

    parser.add_argument("--dataset_file", default="kitti_dataset.json", help="dataset file")
    parser.add_argument("--info", type=str, default='', help='Name of evaluation. '
                                                             'It will use for name of the test folder.')
    return parser.parse_args()

def main(config):
    v = evaluate_MemNet.Validator(config)
    print('start evaluation')
    v.test_model()

if __name__ == "__main__":
    config = parse_config()
    main(config)



